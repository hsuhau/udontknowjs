// 理解处理所有事件(异步函数调用)的单次线程(一次一个)事件循环队列.我们还介绍了多个并发模式以不同的当时解释同时运行的事件链或"进程"(任务,函数调用,等等)之间的关系(如果有的话)
// 第1章的所有粒子都是把函数当作独立不可分割单元来使用的.在函数内部,语句以可预测的顺序执行(在编译期以上的层级),但是在函数顺序这一层级),但是在函数顺序这一层级,事件(也就是异步函数调用)的运行顺序可以有多种更可能
// 在所有这些示例中,函数都是作为回调使用的,因为他是事件循环"回头调用"到程序中的目标,队列处理到这个项目的时候会运行它.

// 目前为止,回调是编写和处理JavaScript程序异步逻辑的最常用方式.确实,回调时这门语言中最基础的异步模式
// 无数JavaScript程序,甚至成为一些最为高深和复杂的,所依赖的异步基础也仅限于回调(当然,他们使用了第1章介绍的各种高并发交互模式).回调函数是JavaScript的异步主力军,并且它们不辱使命地完成了自己的任务

// 回调函数也不是没有缺点.很多开发者因为更好的异步模式promise(承诺)而激动不已.但是,只有理解了某种抽象的目标和原理,才能有效地应用这种抽象机制

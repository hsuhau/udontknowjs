// A
ajax('..', function (..) {
    // C
})
// B
// A和B表示程序的前半部分
// C表示了程序的后半部分,也就是将来的部分.前半部分立即执行,然后是一段时间不确定的停顿.在未来的某个时刻,如果Ajax调用完成,程序就会从停下的位置继续执行后半部分

// 回调函数包裹或者说封装了程序的延续(continuation)


// 简化版本
// A
setTimeout(function () {
    // C
}, 1000)
// B

// 一旦我们以回调函数的形式引入了单个continuation(或者几十个,就像很多程序所做的那样),我么就容许了大脑工作方式和代码执行的方式的分歧.一旦这两者出现分歧(这远不是这种分歧小狐仙的唯一情况,我想匿名这一点).,我们就的面这样一个无法逆转的事实:代码变得更加难以理解,追踪,调试和维护
